import datetime
from pathlib import Path
from enum import Enum
import traceback

# Generated by OpenAI.
# Byl jsem líný to napsat sám, tak jsem použil OpenAI.
# Omlouvám se, že jsem to neudělal sám. :*


class LogLevel(Enum):
    DEBUG = 0
    INFO = 1
    WARNING = 2
    ERROR = 3
    CRITICAL = 4


class Logger:
    def __init__(self, name, log_level=LogLevel.INFO, log_file=None):
        """
        Initialize logger with name and optional log level and log file.

        Args:
            name (str): Name of the logger
            log_level (LogLevel): Minimum log level to display
            log_file (str, optional): Path to log file
        """
        self.name = name
        self.log_level = log_level
        # If no log file is provided, use default logs/api.log
        if log_file is None:
            logs_dir = Path(__file__).parent.parent / "logs"
            logs_dir.mkdir(exist_ok=True)
            self.log_file = str(logs_dir / "api.log")
        else:
            self.log_file = log_file

        # Create log directory if it doesn't exist
        log_dir = Path(self.log_file).parent
        if log_dir.name and not log_dir.exists():
            log_dir.mkdir(parents=True, exist_ok=True)

    def _log(self, level, message, *args):
        """Internal method to log a message."""
        if level.value < self.log_level.value:
            return

        # Format the message with arguments if provided
        if args:
            message = message.format(*args)

        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S.%f")[:-3]
        log_entry = f"[{timestamp}] [{level.name}] [{self.name}] {message}"

        # Write to file
        try:
            with Path(self.log_file).open("a") as f:
                f.write(log_entry + "\n")
        except Exception as e:
            print(f"Error writing to log file: {e}")

    def debug(self, message, *args) -> None:
        """Log a debug message."""
        self._log(LogLevel.DEBUG, message, *args)

    def info(self, message, *args) -> None:
        """Log an info message."""
        self._log(LogLevel.INFO, message, *args)

    def warning(self, message, *args) -> None:
        """Log a warning message."""
        self._log(LogLevel.WARNING, message, *args)

    def error(self, message, *args) -> None:
        """Log an error message."""
        self._log(LogLevel.ERROR, message, *args)

    def critical(self, message, *args) -> None:
        """Log a critical message."""
        self._log(LogLevel.CRITICAL, message, *args)

    def exception(self, message, *args) -> None:
        """Log an exception with traceback."""
        exc_info = traceback.format_exc()
        self._log(LogLevel.ERROR, f"{message}\n{exc_info}", *args)


# Create a default logger
logger = Logger("root")
